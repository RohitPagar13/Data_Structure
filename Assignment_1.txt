Rohit Pagar
Q.1->
package postfix;
import java.util.*;

public class post {
	int stack[],tos,MaxSize;
	void createStack(int size) {
		stack = new int[size];
		MaxSize=size;
		tos=-1;
	}
	void push(int e) {
		tos++;
		stack[tos]=e;
		//stack[++tos]=e;
	}
	boolean is_full() {
		if(tos==MaxSize-1)
			return true;
		else 
			return false;
	}
	int pop() {
		int temp=stack[tos];
		tos--;
		return temp;
		
	}
	boolean is_empty() {
		if(tos==-1)
			return true;
		else 
			return false;
	}
	int peek() {
		return (stack[tos]);
	}
	void print_stack() {
		for (int i=tos; i>-1; i--) {
			System.out.println(stack[i]);
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		post p = new post();
		p.createStack(s.length());
		for(int i = 0; i<s.length();i++) {
			char c = s.charAt(i);
			if(Character.isDigit(c)) {
				p.push(Character.getNumericValue(c));
			
			}
			else {
				if(!p.is_empty()) {
				int second = p.pop();
				int first = p.pop();
				
				switch (c) {
				case '+':{
					int top = first+second;
					p.push(top);
				}
				break;
				case '-':{
					int top = first-second;
					p.push(top);
				}
				break;
				case '*':{
					int top = first*second;
					p.push(top);
				}
				break;
				case '/':{
					int top = first/second;
					p.push(top);
				}
				break;
				}
				
				}
			}
		}
		System.out.println(p.peek());
		
	}

}


Q.2
import java.util.Scanner;

public class infix_to_prefix {
	char stack[];
	int tos,MaxSize;
	void createstack(int size) {
		stack =new char[size];
		MaxSize=size;
		tos=-1;
		
	}
	void push(char e) {
		tos++;
		stack [tos]=e;
	}
	boolean is_full() {
		if(tos==MaxSize-1)
			return true;
		else
			return false;
	}
	char pop() {
		char temp =stack[tos];
		tos--;
		return temp;

	}
	char peek() {
		char temp =stack [tos];
		return temp;

	}
	boolean is_empty() {
		if(tos==-1)
			return true;
		else
			return false;
	}
    boolean is_operator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }

    int get_precedence(char operator) {
        switch (operator) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return 0;
        }
    }
    String INFIX_TO_PREFIX(String infix) {
    	StringBuilder prefix= new StringBuilder();
    	
    	for (int i = infix.length() - 1; i >= 0; i--) {
            char c = infix.charAt(i);
            if (c == ')') {
                push(c);
            } else if (c == '(') {
                while (!is_empty() && peek() != ')') {
                    prefix.insert(0, pop());
                }
                pop(); // Pop ')'
            } else if (Character.isLetterOrDigit(c)) {
                prefix.insert(0, c);
            } else if (is_operator(c)) {
                while (!is_empty() && get_precedence(c) < get_precedence(peek())) {
                    prefix.insert(0, pop());
                }
                push(c);
            }
        }

    	 while (!is_empty()) {
             prefix.insert(0, pop());
         }


        return prefix.toString();
    	
    }
    public static void main(String args[]) {
    	Scanner sc= new Scanner(System.in);
    	String s=sc.nextLine();
    	infix_to_prefix OBJ= new infix_to_prefix();
    	OBJ.createstack(s.length());
    	System.out.println("Prefix is "+OBJ.INFIX_TO_PREFIX(s));
    }
    

}


Q.3

import java.util.*;
public class Reverse {

	char stack[];
	int tos,MaxSize;
	void createStack(int size) {
		stack = new char[size];
		MaxSize=size;
		tos=-1;
	}
	void push(char e) {
		tos++;
		stack[tos]=e;
		//stack[++tos]=e;
	}
	boolean is_full() {
		if(tos==MaxSize-1)
			return true;
		else 
			return false;
	}
	char pop() {
		char temp=stack[tos];
		tos--;
		return temp;
		
	}
	boolean is_empty() {
		if(tos==-1)
			return true;
		else 
			return false;
	}
	int peek() {
		return (stack[tos]);
	}
	void print_stack() {
		for (int i=tos; i>-1; i--) {
			System.out.print(stack[i]);
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Reverse r1 = new Reverse();
		Scanner sc = new Scanner (System.in);
		Reverse r2 = new Reverse();
		String s = sc.next();
		r1.createStack(s.length());
		r2.createStack(s.length());
		for (int i = 0; i<s.length(); i++) {
			char c = s.charAt(i);
			r1.push(c);
		}
		int size = r1.tos;
		for (int i = 0; i<=size; i++) {
			r2.push(r1.pop());
		}
		r2.print_stack();
	}
}


Q.4

import java.util.Scanner;

public class Sorted_Stack {
	int stack[];
	int tos,MaxSize;
	void createStack(int size) {
		stack = new int[size];
		MaxSize=size;
		tos=-1;
	}
	void push(int e) {
		tos++;
		stack[tos]=e;
		//stack[++tos]=e;
	}
	boolean is_full() {
		if(tos==MaxSize-1)
			return true;
		else 
			return false;
	}
	int pop() {
		int temp=stack[tos];
		tos--;
		return temp;
		
	}
	boolean is_empty() {
		if(tos==-1)
			return true;
		else 
			return false;
	}
	int peek() {
		return (stack[tos]);
	}
	void print_stack() {
		for (int i=tos; i>-1; i--) {
			System.out.print(stack[i]);
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Sorted_Stack stack=new Sorted_Stack();
    	Sorted_Stack Sort_stack=new Sorted_Stack();
    	Scanner sc=new Scanner(System.in);
    	System.out.println("Enter the size");
    	int size=sc.nextInt();
    	stack.createStack(size);
    	Sort_stack.createStack(size);
    	while(!stack.is_full()) 
    	{
    		System.out.println("Enter the Number");
    		stack.push(sc.nextInt());
       	}
    	
    	while (!stack.is_empty()) {
            int temp = stack.pop();
            // Pop elements from the sortedStack and push them back onto the stack
            while (!Sort_stack.is_empty() && Sort_stack.peek() > temp) {
                stack.push(Sort_stack.pop());
            }
            Sort_stack.push(temp);
        }
    	Sort_stack.print_stack();
    	    	
	}
}

